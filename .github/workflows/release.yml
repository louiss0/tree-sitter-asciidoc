name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [20]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Build parser
        run: npx tree-sitter build

      - name: Run tests
        shell: bash
        run: |
          set -e
          npx tree-sitter test --file-name 01_sections.txt
          npx tree-sitter test --file-name 03_attributes.txt
          npx tree-sitter test --file-name 07_ordered_lists.txt
          npx tree-sitter test --file-name 08_description_lists.txt
          npx tree-sitter test --file-name 09_callout_lists.txt
          npx tree-sitter test --file-name 10_mixed_lists.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: runner.os == 'Linux'
        with:
          name: parser-artifacts-${{ runner.os }}
          path: |
            src/
            bindings/
            *.wasm
            *.dll
            *.so
            *.dylib

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Build parser
        run: npx tree-sitter build

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## Release Notes
            
            Tree-sitter AsciiDoc parser release.
            
            ### Features
            - Complete AsciiDoc grammar implementation
            - Support for sections, lists, attributes, and delimited blocks
            - Cross-platform bindings (C, Go, Node.js, Python, Rust, Swift)
            
            ### Installation
            ```bash
            npm install tree-sitter-asciidoc
            ```
            
            ### Usage
            See README.md for detailed usage instructions.

  publish-npm:
    needs: [build-and-test, release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Build parser
        run: npx tree-sitter build

      - name: Publish to NPM
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}