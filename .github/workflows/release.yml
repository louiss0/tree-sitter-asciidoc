name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Tree Sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate and build parser
        run: |
          tree-sitter generate
          tree-sitter build

      - name: Run all tests
        run: |
          tree-sitter test
          pnpm run test:highlights

      - name: Test bindings
        run: pnpm test

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test-before-release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Tree Sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate and build parser
        run: |
          tree-sitter generate
          tree-sitter build

      - name: Create release package
        run: |
          # Create release artifacts
          mkdir -p release-artifacts
          
          # Copy essential files
          cp -r src/ release-artifacts/
          cp -r queries/ release-artifacts/
          cp -r bindings/ release-artifacts/
          cp grammar.js release-artifacts/
          cp tree-sitter.json release-artifacts/
          cp package.json release-artifacts/
          cp README.md release-artifacts/
          cp LICENSE* release-artifacts/ 2>/dev/null || true
          
          # Create highlighting examples
          mkdir -p release-artifacts/examples/highlighting
          for case_file in test/highlight/cases/*.adoc; do
            if [ -f "$case_file" ]; then
              basename=$(basename "$case_file" .adoc)
              tree-sitter highlight --html "$case_file" > "release-artifacts/examples/highlighting/${basename}.html"
            fi
          done

      - name: Generate WASM build
        run: |
          tree-sitter build --wasm
          cp tree-sitter-asciidoc.wasm release-artifacts/

      - name: Create package tarball
        run: pnpm pack

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # Tree Sitter AsciiDoc Parser ${{ steps.version.outputs.version }}
          
          ## What's New
          
          This release includes the AsciiDoc parser for Tree Sitter with the following features:
          
          ### Supported Constructs
          
          - **Document Structure**: Document titles and section headings (levels 1-6)
          - **Attributes**: Attribute entries and references
          - **Text Content**: Paragraphs and text formatting
          - **Lists**: Unordered, ordered, description, and callout lists
          - **Conditional Content**: `ifdef::`, `ifndef::`, `ifeval::` directives
          
          ### Syntax Highlighting
          
          - Tree Sitter queries for syntax highlighting
          - Support for popular editors and tools
          - HTML highlighting examples included in release
          
          ### Language Bindings
          
          - Node.js bindings
          - C bindings
          - WebAssembly build included
          
          ## Installation
          
          ```bash
          npm install tree-sitter-asciidoc
          ```
          
          ## Usage
          
          ```javascript
          const Parser = require('tree-sitter');
          const AsciiDoc = require('tree-sitter-asciidoc');
          
          const parser = new Parser();
          parser.setLanguage(AsciiDoc);
          
          const tree = parser.parse('= Hello World\n\nThis is AsciiDoc!');
          console.log(tree.rootNode.toString());
          ```
          
          ## Files in this Release
          
          - `tree-sitter-asciidoc-${{ steps.version.outputs.version_number }}.tgz` - NPM package
          - `tree-sitter-asciidoc.wasm` - WebAssembly build
          - Highlighting examples in HTML format
          
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            tree-sitter-asciidoc-*.tgz
            tree-sitter-asciidoc.wasm
            release-artifacts/examples/highlighting/*.html
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test-before-release, create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install Tree Sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate and build parser
        run: |
          tree-sitter generate
          tree-sitter build

      - name: Publish to NPM
        run: |
          # Check if this is a prerelease
          if [[ ${{ github.ref_name }} == *"alpha"* ]] || [[ ${{ github.ref_name }} == *"beta"* ]] || [[ ${{ github.ref_name }} == *"rc"* ]]; then
            pnpm publish --tag beta
          else
            pnpm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
